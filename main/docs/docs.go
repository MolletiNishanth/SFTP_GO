// // Package docs GENERATED BY SWAG; DO NOT EDIT
// // This file was generated by swaggo/swag
// package docs

// import "github.com/swaggo/swag"

// const docTemplate = `{
//     "schemes": {{ marshal .Schemes }},
//     "swagger": "2.0",
//     "info": {
//         "description": "{{escape .Description}}",
//         "title": "{{.Title}}",
//         "termsOfService": "demo.com",
//         "contact": {
//             "name": "API Support",
//             "url": "http://demo.com/support"
//         },
//         "version": "{{.Version}}"
//     },
//     "host": "{{.Host}}",
//     "basePath": "{{.BasePath}}",
//     "paths": {},
//     "securityDefinitions": {
//         "ApiKeyAuth": {
//             "type": "apiKey",
//             "name": "Authorization",
//             "in": "header"
//         },
//         "BasicAuth": {
//             "type": "basic"
//         }
//     }
// }`

// // SwaggerInfo holds exported Swagger Info so clients can modify it
// var SwaggerInfo = &swag.Spec{
// 	Version:          "1.0",
// 	Host:             "localhost:8080",
// 	BasePath:         "/",
// 	Schemes:          []string{},
// 	Title:            "SFTP TO GCS API",
// 	Description:      "This is an API which takes input from the api trigger and checks if a text file is present and sends the data to GCS",
// 	InfoInstanceName: "swagger",
// 	SwaggerTemplate:  docTemplate,
// }

// func init() {
// 	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
// }


package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "demo.com",
        "contact": {
            "name": "API Support",
            "url": "http://demo.com/support"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "creates Resource directory",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Creates a account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/pullfile": {
            "get": {
                "description": "Tries to get the file data ",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Tries to get the file data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Tries to get the file data ",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Tries to get the file data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        
        
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
// var SwaggerInfo = swaggerInfo{
// 	Version:     "1.0",
// 	Host:        "localhost:8091",
// 	BasePath:    "/api/v1",
// 	Schemes:     []string{},
// 	Title:       "Swagger  demo service API",
// 	Description: "This is demo server.",
// }
// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "SFTP TO GCS API",
	Description:      "This is an API which takes input from the api trigger and checks if a text file is present and sends the data to GCS",
	InfoInstanceName: "swagger",
//	SwaggerTemplate:  docTemplate,
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}